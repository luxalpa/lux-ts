main: () => {
    y: Dragon<Boolean> = [name: false]

    for i := range(3, 5) {
        console.log(i)
    }
}

Dragon<T: Type>: class {
    name: T
}

Phoenix<T: Type>: alias Dragon<T>

Iterator<T: Type>: class {
    next: () => T
    atEnd: () => Boolean
}

IEnumerable<T: Type>: class {
    begin: () => Iterator<T>
}

Counter: class {
    inherit Iterator<Integer>

    currentValue: Integer
    max: Integer

    next: () => Integer {
        ret := this.currentValue
        this.currentValue = this.currentValue + 1
        return ret
    }

    atEnd: () => Boolean {
        return this.currentValue = this.max+2
    }

    @static create: () => Counter {
        return [currentValue: 0, max: 10]
    }
}

range: (min: Integer, max: Integer) => Counter {
    return [currentValue: min, max: max]
}
