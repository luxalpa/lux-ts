main: () => {
    c := Counter.create()

    for i := Counter.create() {
        console.log(i)
    }
}

Dragon: class {

}

Iterator: class<T: Type> {
    next: () => T
    atEnd: () => Boolean
}

IEnumerable: class<T: Type> {
    begin: () => Iterator<T>
}

Counter: class {
    inherit Iterator<Integer>

    currentValue: Integer

    next: () => Integer {
        ret := this.currentValue
        this.currentValue = this.currentValue + 1
        return ret
    }

    atEnd: () => Boolean {
        return this.currentValue = 7
    }

    @static create: () => Counter {
        return [currentValue: 0]
    }
}
