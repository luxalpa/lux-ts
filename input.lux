main: () => {
    v := 0
    for {
        v = v + 1
        console.log(v)
        if v = 5 {
            break
        }
    }

    /*c := Counter.create()
    it := c.begin()
    console.log(it.next())*/
}

Iterator: class<T: Type> {
    next: () => T
    atEnd: () => Boolean
}

IEnumerable: class<T: Type> {
    begin: () => Iterator<T>
}

CounterIterator: class {
    inherit Iterator<Integer>

    currentValue: Integer

    next: () => Integer {
        ret := this.currentValue
        this.currentValue = this.currentValue + 1
        return ret
    }

    atEnd: () => Boolean {
        return this.currentValue = 5
    }

    @static create: () => CounterIterator {
        return [currentValue: 0]
    }
}

Counter: class {
    inherit IEnumerable<Integer>

    @static create: () => Counter {
        return []
    }

    begin: () => Iterator<Integer> {
        return CounterIterator.create()
    }
}
