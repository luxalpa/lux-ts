/*$include("input2.lux")

@external() struct Process {
    argv: Array<String>
}

@external() process: Process

@external() methods Array<T> {
    slice(n: Integer) => Array<T>
}

function main() => Integer {
    v := process.argv.slice(2)
    console.log("Hello", v[0])
    return 0
}*/

function main() => Integer {
        v := 0
        for x := range(1, 5) {
            v = v + x
        }
        return v
    }

    function range(min: Integer, max: Integer) => RangeIterator {
        return RangeIterator { value: min, max: max }
    }

    struct RangeIterator {
        value: Integer
        max: Integer
    }

    struct IteratorResult<T: Type> {
        done: Boolean
        value: T
    }

    trait Iterator<T: Type> {
        next() => IteratorResult<T>
    }

    methods RangeIterator for Iterator<Integer> {
        next() => IteratorResult<Integer> {
            if(this.value = this.max) {
                return IteratorResult<Integer> { done: true, value: this.value }
            }

            previous := this.value
            this.value = this.value + 1
            return IteratorResult<Integer> { done: false, value: previous }
        }
    }
